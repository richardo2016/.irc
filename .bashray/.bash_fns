reload_bash_session() {
  source ~/.bash_profile
}

parse_git_local_author() {
  TEXT=$(git config --local user.name 2> /dev/null)
  EMAIL=$(git config --local user.email 2> /dev/null)
  if [ -z "$TEXT" ]; then
    TEXT="$EMAIL"
  elif [ ! -z "$EMAIL" ]; then
    TEXT="$TEXT <$EMAIL>"
  fi

  echo $TEXT 2> /dev/null | sed -e 's/\(.*\)/\1/'
}

# git
parse_git_branch() {
  AUTHOR=$(parse_git_local_author);

  if [ ! -z "$AUTHOR" ]; then
    AUTHOR=" ðŸš€ $AUTHOR"
  fi
  echo "$(git branch 2> /dev/null)${AUTHOR}" 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(git@ \1)/'
}

dump_git() {
  git config --global user.name "richardo2016"
  git config --global user.email "richardo2016@gmail.com"
  
  git config --global credential.helper "store"

  echo "dump_git finished";
}

dump_gitproxy() {
  git config --global http.https://github.com.proxy "sock5://127.0.0.1:7890"
  git config --global https.https://github.com.proxy "sock5://127.0.0.1:7890"
  
  echo "dump_gitproxy finished";
}

dump_rc() {
  dump_git
  dump_gitproxy
  
  echo "dump_rc finished";
}

use_brew_openssl() {
  if [ -f "brew" ]; then
    # For OPENSSL in mac osx
    export OPENSSL_ROOT_DIR=$(brew --prefix openssl)
    export OPENSSL_LIB_DIR=$(brew --prefix openssl)"/lib"
    export OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)"/include"
  fi
}

## nodejs setup function
install_nvm () {
  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
}

proxy2charles () {
  export http_proxy=http://127.0.0.1:8888;
  export https_proxy=http://127.0.0.1:8888;
}

proxy2iproxy () {
  export http_proxy=http://127.0.0.1:12888;
  export https_proxy=http://127.0.0.1:12888;
}

proxy2none() {
  unset http_proxy;
  unset https_proxy;
  unset all_proxy;
}

# ruby about
rbenv_install() {
  brew install rbenv ruby-build
}

rbenv_init() {
  rbenv init;
}

rbenv_system() {
  rbenv global system;
  ruby --version;
}

rbenv_doctor() {
  curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor | bash
}
# rbenv about: end

# ios development :start
iosdev_setup() {
  sudo gem install cocoapods;
  sudo gem install fastlane;
}
# ios development :end

use_tuna_mirror_brew() {
  export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"
  export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git"
  export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles"
}

install_brew_intel() {
  cd ~/Downloads
  mkdir homebrew
  curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C homebrew
  sudo mv homebrew /usr/local/homebrew
}

# wasm about :start

# @see https://github.com/WebAssembly/wasi-sdk
wasi_sdk_install() {
  WASI_VERSION=12
  INSTALL_DIR="$HOME/.wasienv";
  while [[ "$#" -gt 0 ]]; do
    case $1 in
        -v|--version) WASI_VERSION="$2"; shift ;;
        -i|--install) INSTALL_DIR="$2"; shift ;;
        --link) DO_LINK="true"; ;;
        -*|--**) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
  done
  WASI_VERSION_FULL="${WASI_VERSION}.0"

  if [[ "$RAY_HOST_OS" == "Linux" ]]; then
    WASI_OS="linux";
  fi
  if [[ "$RAY_HOST_OS" == "Darwin" ]]; then
    WASI_OS="macos";
  fi
  if [[ "$RAY_HOST_OS" == "Windows" ]]; then
    WASI_OS="mingw";
  fi

  CUR=$(pwd);
  mkdir -p $INSTALL_DIR;
  cd $INSTALL_DIR;
  file=wasi-sdk-${WASI_VERSION_FULL}-${WASI_OS}.tar.gz;

  echo "[wasi_sdk_install] Downloading WASI SDK $file... to $INSTALL_DIR";
  curl -sL https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION_FULL}-${WASI_OS}.tar.gz -O $file;
  # check if package downloaded
  ls -la
  echo "[wasi_sdk_install] Extracting WASI SDK $file...";
  tar xvf $file;

  # print clang version
  $INSTALL_DIR/wasi-sdk-${WASI_VERSION_FULL}/bin/clang --version

  if [ ! -z $DO_LINK ]; then
  
    if [[ $RAY_IS_WIN_BASH ]]; then
      # https://stackoverflow.com/questions/18654162/enable-native-ntfs-symbolic-links-for-cygwin
      export CYGWIN=winsymlinks:nativestrict
      # https://stackoverflow.com/questions/18641864/git-bash-shell-fails-to-create-symbolic-links/40914277#40914277
      export MSYS=winsymlinks:nativestrict
      echo "[wasi_sdk_install] now we are under windows bash, so we need to set CYGWIN and MSYS to use windows symbolic links";
      echo "[wasi_sdk_install] it's better to run bash as admin to do link.";
    fi

    echo "[wasi_sdk_install] install finished! 'export PATH=\$PATH:$INSTALL_DIR/bin' >> ~/.bashrc";
    [ -d wasi-sdk-${WASI_VERSION_FULL}/bin/ ] && rm -rf ./bin && ln -sf wasi-sdk-${WASI_VERSION_FULL}/bin/ ./bin;
    [ -d wasi-sdk-${WASI_VERSION_FULL}/lib/ ] && rm -rf ./lib && ln -sf wasi-sdk-${WASI_VERSION_FULL}/lib/ ./lib;
    [ -d wasi-sdk-${WASI_VERSION_FULL}/include/ ] && rm -rf ./include && ln -sf wasi-sdk-${WASI_VERSION_FULL}/include/ ./include;
    [ -d wasi-sdk-${WASI_VERSION_FULL}/share/ ] && rm -rf ./share && ln -sf wasi-sdk-${WASI_VERSION_FULL}/share/ ./share;
  fi

  cd $CUR;
}

wasi_doctor() {
  if [ -e ~/.wasienv/bin ]; then
      echo "[wasi_doctor] WASI SDK is installed";
  else
      echo "[wasi_doctor] WASI SDK is not installed";
  fi
}

# @see https://github.com/WebAssembly/wabt
wabt_install() {
  WABT_VERSION="1.0.24"
  INSTALL_DIR="$HOME/.wabtenv";
  while [[ "$#" -gt 0 ]]; do
    case $1 in
        -v|--version) WABT_VERSION="$2"; shift ;;
        -i|--install) INSTALL_DIR="$2"; shift ;;
        --link) DO_LINK="true"; ;;
        -*|--**) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
  done

  if [[ "$RAY_HOST_OS" == "Linux" ]]; then
    WABT_OS="ubuntu";
  fi
  if [[ "$RAY_HOST_OS" == "Darwin" ]]; then
    WABT_OS="macos";
  fi
  if [[ "$RAY_HOST_OS" == "Windows" ]]; then
    WABT_OS="windows";
  fi

  CUR=$(pwd);
  mkdir -p $INSTALL_DIR;
  cd $INSTALL_DIR;
  file=wabt-${WABT_VERSION}-${WABT_OS}.tar.gz;

  echo "[wabt_install] Downloading WASI SDK $file... to $INSTALL_DIR";
  curl -sL https://github.com/WebAssembly/wabt/releases/download/${WABT_VERSION}/wabt-${WABT_VERSION}-${WABT_OS}.tar.gz -O $file;
  # check if package downloaded
  ls -la
  echo "[wabt_install] Extracting WASI SDK $file...";
  tar xvf $file;

  # check if wabt binaries installed
  ls -la ./wabt-${WABT_VERSION}/bin/

  if [ ! -z $DO_LINK ]; then
    if [[ $RAY_IS_WIN_BASH ]]; then
      # https://stackoverflow.com/questions/18654162/enable-native-ntfs-symbolic-links-for-cygwin
      export CYGWIN=winsymlinks:nativestrict
      # https://stackoverflow.com/questions/18641864/git-bash-shell-fails-to-create-symbolic-links/40914277#40914277
      export MSYS=winsymlinks:nativestrict
      echo "[wabt_install] now we are under windows bash, so we need to set CYGWIN and MSYS to use windows symbolic links";
      echo "[wabt_install] it's better to run bash as admin to do link.";
    fi
    # TODO: add shell script to run command as admin.
    [ -d wabt-${WABT_VERSION}/bin/ ] && rm -rf ./bin && ln -sf wabt-${WABT_VERSION}/bin/ ./bin;
    [ -d wabt-${WABT_VERSION}/lib/ ] && rm -rf ./lib && ln -sf wabt-${WABT_VERSION}/lib/ ./lib;
    [ -d wabt-${WABT_VERSION}/include/ ] && rm -rf ./include && ln -sf wabt-${WABT_VERSION}/include/ ./include;

    echo "[wabt_install] install finished! 'export PATH=\$PATH:$INSTALL_DIR/bin' >> ~/.bashrc";
  fi

  cd $CUR;
}

wabt_doctor() {
  if [ -e ~/.wabtenv/bin ]; then
      echo "[wabt_doctor] WABT binary is installed";
  else
      echo "[wabt_doctor] WABT binary is not installed";
  fi
}

check_port_win32() {
  netstat -aon| findstr "$1";
  echo "";
  echo "if found, run 'taskkill /T /F /PID <PORT>' to kill it.";
}

EMCC_REPO=$HOME/projects/emscripten-core/emsdk;
emcc_setup() {
  if [ ! -z "$1" ]; then
    EMCC_VERSION=$1
  else
    EMCC_VERSION="1.40.1-fastcomp"
  fi

  if [ ! -d $EMCC_REPO ]; then
    echo "[emcc_setup] clone repo to $EMCC_REPO...";
    git clone https://github.com/emscripten-core/emsdk.git $EMCC_REPO;
  fi
  CUR=$(pwd);

  cd $EMCC_REPO;
  git fetch --all --prune;
  git pull;
  ./emsdk install $EMCC_VERSION;
  ./emsdk activate $EMCC_VERSION;
  source $EMCC_REPO/emsdk_env.sh;
  # check if emcc valid
  emcc -v;

  cd $CUR;
}
if [ -d "$EMCC_REPO" ]; then
  export PATH=$PATH:"$EMCC_REPO";
  # for windows
  if [ -f $EMCC_REPO/python/3.9.2-nuget_64bit/python.exe ]; then
    export EMSDK_PYTHON=$EMCC_REPO/python/3.9.2-nuget_64bit/python.exe
  fi
  if [ -f $EMCC_REPO/python/3.7.4-pywin32_64bit/python.exe ]; then
    export EMSDK_PYTHON=$EMCC_REPO/python/3.7.4-pywin32_64bit/python.exe
  fi
  if [ $RAY_HOST_OS = "Windows" -a -f "$EMCC_REPO/upstream/emscripten/emcc" ]; then
    export PATH=$PATH:"$EMCC_REPO/upstream/emscripten/";
  fi
fi
# wasm about :end

acme_install () {
  CUR=$(pwd);
  if [ ! -d ~/acme.sh ]; then
    git clone https://github.com/acmesh-official/acme.sh.git ~/acme.sh
  fi
  cd ~/acme.sh;
  git pull;

  cd $CUR;
  echo "[acme_install] installed acme.sh to $HOME/acme.sh";
  check_acme;
}
check_acme() {
  if [ -d ~/acme.sh ]; then
    export PATH=$PATH:"~/acme.sh"
  fi
}
check_acme;

. ~/.bashray/.bash_aliases --source-only