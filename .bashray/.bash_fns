reload_bash_session() {
  source ~/.bash_profile
}

# git
parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(git@\1)/'
}

dump_git() {
  git config --global user.name "richardo2016"
  git config --global user.email "richardo2016@gmail.com"
  
  git config --global credential.helper "store"

  echo "dump_git finished";
}

dump_gitproxy() {
  git config --global http.https://github.com.proxy "sock5://127.0.0.1:7890"
  git config --global https.https://github.com.proxy "sock5://127.0.0.1:7890"
  
  echo "dump_gitproxy finished";
}

dump_rc() {
  dump_git
  dump_gitproxy
  
  echo "dump_rc finished";
}

use_brew_openssl() {
  if [ -f "brew" ]; then
    # For OPENSSL in mac osx
    export OPENSSL_ROOT_DIR=$(brew --prefix openssl)
    export OPENSSL_LIB_DIR=$(brew --prefix openssl)"/lib"
    export OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)"/include"
  fi
}

## nodejs setup function
install_nvm () {
  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
}

proxy2charles () {
  export http_proxy=http://127.0.0.1:8888;
  export https_proxy=http://127.0.0.1:8888;
}

proxy2iproxy () {
  export http_proxy=http://127.0.0.1:12888;
  export https_proxy=http://127.0.0.1:12888;
}

proxy2none() {
  unset http_proxy;
  unset https_proxy;
  unset all_proxy;
}

# ruby about
rbenv_install() {
  brew install rbenv ruby-build
}

rbenv_init() {
  rbenv init;
}

rbenv_system() {
  rbenv global system;
  ruby --version;
}

rbenv_doctor() {
  curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor | bash
}
# rbenv about: end

# ios development :start
iosdev_setup() {
  sudo gem install cocoapods;
  sudo gem install fastlane;
}
# ios development :end

use_tuna_mirror_brew() {
  export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"
  export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git"
  export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles"
}

install_brew_intel() {
  cd ~/Downloads
  mkdir homebrew
  curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C homebrew
  sudo mv homebrew /usr/local/homebrew
}

# wasm about :start

# @see https://github.com/WebAssembly/wasi-sdk
wasi_sdk_install() {
  if [ ! -z "$1" ]; then
    WASI_VERSION=$1
  else
    WASI_VERSION=12
  fi
  WASI_VERSION_FULL="${WASI_VERSION}.0"

  if [ ! -z "$2" ]; then
    INSTALL_DIR=$2;
  else
    INSTALL_DIR="$HOME/.wasienv";
  fi

  if [[ "$RAY_HOST_OS" == "Linux" ]]; then
    WASI_OS="linux";
  fi
  if [[ "$RAY_HOST_OS" == "Darwin" ]]; then
    WASI_OS="macos";
  fi
  if [[ "$RAY_HOST_OS" == "Windows" ]]; then
    WASI_OS="mingw";
  fi

  CUR=$(pwd);
  mkdir -p $INSTALL_DIR;
  cd $INSTALL_DIR;
  file=wasi-sdk-${WASI_VERSION_FULL}-${WASI_OS}.tar.gz;

  echo "[download_wasi_sdk] Downloading WASI SDK $file... to $INSTALL_DIR";
  curl -sL https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION_FULL}-${WASI_OS}.tar.gz -O $file;
  # check if package downloaded
  ls -la
  echo "[download_wasi_sdk] Extracting WASI SDK $file...";
  tar xvf $file;

  # print clang version
  $INSTALL_DIR/wasi-sdk-${WASI_VERSION_FULL}/bin/clang --version

  ln -sf wasi-sdk-${WASI_VERSION_FULL}/bin/ ./bin;
  ln -sf wasi-sdk-${WASI_VERSION_FULL}/lib/ ./lib;
  ln -sf wasi-sdk-${WASI_VERSION_FULL}/include/ ./include;

  cd $CUR;
}

wasi_doctor() {
  if [ -e ~/.wasienv/bin ]; then
      echo "[wasi_doctor] WASI SDK is installed";
  else
      echo "[wasi_doctor] WASI SDK is not installed";
  fi
}

# @see https://github.com/WebAssembly/wabt
wabt_install() {
  if [ ! -z "$1" ]; then
    WABT_VERSION=$1
  else
    WABT_VERSION="1.0.24"
  fi

  if [ ! -z "$2" ]; then
    INSTALL_DIR=$2;
  else
    INSTALL_DIR="$HOME/.wabtenv";
  fi

  if [[ "$RAY_HOST_OS" == "Linux" ]]; then
    WABT_OS="ubuntu";
  fi
  if [[ "$RAY_HOST_OS" == "Darwin" ]]; then
    WABT_OS="macos";
  fi
  if [[ "$RAY_HOST_OS" == "Windows" ]]; then
    WABT_OS="windows";
  fi

  CUR=$(pwd);
  mkdir -p $INSTALL_DIR;
  cd $INSTALL_DIR;
  file=wabt-${WABT_VERSION}-${WABT_OS}.tar.gz;

  echo "[download_wasi_sdk] Downloading WASI SDK $file... to $INSTALL_DIR";
  curl -sL https://github.com/WebAssembly/wabt/releases/download/${WABT_VERSION}/wabt-${WABT_VERSION}-${WABT_OS}.tar.gz -O $file;
  # check if package downloaded
  ls -la
  echo "[download_wasi_sdk] Extracting WASI SDK $file...";
  tar xvf $file;

  # check if wabt binaries installed
  ls -la ./wabt-${WABT_VERSION}/bin/

  ln -sf wabt-${WABT_VERSION}/bin/ ./bin;
  ln -sf wabt-${WABT_VERSION}/lib/ ./lib;
  ln -sf wabt-${WABT_VERSION}/include/ ./include;

  cd $CUR;
}

wabt_doctor() {
  if [ -e ~/.wabtenv/bin ]; then
      echo "[wabt_doctor] WABT binary is installed";
  else
      echo "[wabt_doctor] WABT binary is not installed";
  fi
}
# wasm about :end