# nodejs
enable_node_mirrors() {
  export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node/
  export NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node/
  export ELECTRON_MIRROR=https://npmmirror.com/mirrors/electron/
  export SASS_BINARY_SITE=https://npmmirror.com/mirrors/node-sass/
  export PHANTOMJS_CDNURL=http://npmmirror.com/mirrors/phantomjs/
  export CHROMEDRIVER_CDNURL=http://npmmirror.com/mirrors/chromedriver/
  export SELENIUM_CDNURL=http://npmmirror.com/mirrorss/selenium/
  export SQLITE3_BINARY_HOST_MIRROR=http://npmmirror.com/mirrors/
  export PROFILER_BINARY_HOST_MIRROR=http://npmmirror.com/mirrors/node-inspector/
  export SENTRYCLI_CDNURL=https://npmmirror.com/mirrors/sentry-cli/
}
[ -z $RAY_DISABLE_SETUP_NODE_MIRRORS ] && enable_node_mirrors;

## nvm
install_nvm_windows() {
  local windows_nvm_install_dir=$RAY_SHARED_HOME/bin/nvm-noinstall;
  if [ ! -e $windows_nvm_install_dir/nvm ] || [ "$1" == "--force" ]; then
    rm -rf $windows_nvm_install_dir;
    echo "cleaned $windows_nvm_install_dir if it exists.";
    mkdir -p $windows_nvm_install_dir;

    rm -f $TMPDIR/nvm-noinstall.zip;
    curl -sfL https://github.com/coreybutler/nvm-windows/releases/download/1.1.12/nvm-noinstall.zip -o $TMPDIR/nvm-noinstall.zip
    unzip $TMPDIR/nvm-noinstall.zip -d $windows_nvm_install_dir;

    echo "nvm installed in $windows_nvm_install_dir";
  else
    echo "nvm already installed in $windows_nvm_install_dir";
  fi
  export PATH=$windows_nvm_install_dir:$PATH;
}
install_nvm_unix() {
  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.39.7/install.sh | bash
}

setup_node_env_from_nvm(){
  ## nodejs's env
  case $RAY_HOST_OS in
    Windows)
      if [ -e "$RAY_SHARED_HOME/bin/nvm-noinstall/nvm" ]; then
        local root_raw=$(nvm root);
        local nvm_root=${root_raw/"Current Root: "/};
        local node_ver=$(nvm current);
        export NODE_PATH=$nvm_root\\$node_ver;
        export NODE_BIN_PATH="$NODE_PATH"
        export PATH="$PATH:$NODE_BIN_PATH"
      fi
      ;;
    Darwin|Linux)
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"  # This loads nvm
      if [ -d "$NVM_DIR/.git" ]; then
        export NODE_PATH="$HOME/.nvm/versions/node/$(nvm version)/lib"
        export NODE_BIN_PATH="$HOME/.nvm/versions/node/$(nvm version)/bin"
        export PATH="$PATH:$NODE_BIN_PATH"
      fi
      ;;
  esac
}
setup_node_env_from_nvm;

alias onpm="npm --registry=https://registry.npmjs.org \
  --userconfig=$HOME/.onpmrc"

# golang
export RAY_GOPATH=~/WorkSpace/go
if [ -d $RAY_GOPATH ]; then
  [ -z $GOPATH ] && export GOPATH=$RAY_GOPATH
fi
[ -d $GOPATH ] && export PATH=$PATH:$GOPATH/bin
export PATH="$PATH:$RAY_GOPATH/bin"

# composer
export PATH="$PATH:$HOME/.composer/vendor/bin"

# # GRADLE
# export GRADLE_HOME=~/env/gradle-4.0.1;
# export PATH=$PATH:$GRADLE_HOME/bin
if [ $RAY_HOST_OS == "Darwin" ]; then
  if [ -f $RAY_SHARED_HOME/Library/Android/sdk/platform-tools/adb ]; then
    export ANDROID_HOME=$RAY_SHARED_HOME/Library/Android/sdk
    export PATH=$PATH:$ANDROID_HOME/emulator
    export PATH=$PATH:$ANDROID_HOME/platform-tools
  fi
fi

# rbenv, @see https://github.com/rbenv/rbenv
if [ -e rbenv ] || [ -e /usr/local/bin/rbenv ]; then
    eval "$(rbenv init - bash)"
    export PATH=$PATH:~/.rbenv/shims
fi

# Editor aliases
case ${RAY_HOST_OS} in
  Windows)
    VSCPATH="$HOME/AppData/Local/Programs/Microsoft\ VS\ Code/Code.exe"
    if [ -e "$VSCPATH" ]; then
      alias vsc="code"
    else
      alias vsc=$VSCPATH
    fi
    ;;
  Darwin)
    VSCPATH="/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code"
    alias vsc=$VSCPATH
    SUBLPATH="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"
    alias subl=$SUBLPATH
    ;;
esac

if [ -z $RAY_IS_WIN_BASH ]; then
PS1="\[\e[31;1m\]üòÉ  \u \$(parse_git_branch) \[\e[32m\]\w\[\e[34;1m\] \[\e[35;1m\] \[\e[37;1m\]"
else
PS1="\[\033[33m\]‚≠ê\[\033[36m\]  \u@\h \[\e[31;1m\]\$(parse_git_branch) \[\e[32m\]\w\[\e[34;1m\] \[\e[35;1m\] \[\e[37;1m\]"
fi

## git-completion.bash
if [ -f ~/.git-completion.bash ]; then
  . ~/.git-completion.bash
fi

download_fibjs_binary() {
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "Usage: download_fibjs_binary <version> <target>"
    return 1
  fi

  local FIBJS_VERSION=$1
  local FIBJS_TARGET_DIR=$2

  if [ -e $FIBJS_TARGET_DIR ] && [ -f $FIBJS_TARGET_DIR ]; then
    echo "$FIBJS_TARGET_DIR file already exists."
    return 1
  elif [ ! -d $FIBJS_TARGET_DIR ]; then
    echo "Creating $FIBJS_TARGET_DIR ..."
    mkdir -p $FIBJS_TARGET_DIR
  fi

  case $RAY_HOST_OS in
    Windows)
      local fibjs_binarys=(
        "https://github.com/fibjs/fibjs/releases/download/${FIBJS_VERSION}/fibjs-${FIBJS_VERSION}-windows-${RAY_HOST_ARCH}.exe"
        "https://github.com/fibjs/fibjs/releases/download/${FIBJS_VERSION}/fibjs-${FIBJS_VERSION}-win32-${RAY_HOST_ARCH}.exe"
      )

      # unprefix "v" from version
      FIBJS_VERSION_SEMVER=${FIBJS_VERSION#"v"}
      echo "FIBJS_VERSION_SEMVER: $FIBJS_VERSION_SEMVER"
      vercomp $FIBJS_VERSION_SEMVER "0.36.0"
      case $? in
        # '<='
        0|2) local fibjs_binary=${fibjs_binarys[0]} ;;
        # '>'
        1) local fibjs_binary=${fibjs_binarys[1]} ;;
      esac

      echo "Downloading $fibjs_binary to $FIBJS_TARGET_DIR ..."

      curl -L $fibjs_binary -o $FIBJS_TARGET_DIR/fibjs-${FIBJS_VERSION}-windows-${RAY_HOST_ARCH}.exe
      cp $FIBJS_TARGET_DIR/fibjs-${FIBJS_VERSION}-windows-${RAY_HOST_ARCH}.exe $FIBJS_TARGET_DIR/fibjs.exe
      echo "$FIBJS_TARGET_DIR/fibjs.exe Ready"
      ;;
    Linux)
      local fibjs_binary=https://github.com/fibjs/fibjs/releases/download/${FIBJS_VERSION}/fibjs-${FIBJS_VERSION}-linux-${RAY_HOST_ARCH}.exe
      echo "Downloading $fibjs_binary to $FIBJS_TARGET_DIR ..."

      curl -L $fibjs_binary -o $FIBJS_TARGET_DIR/fibjs-${FIBJS_VERSION}-linux-${RAY_HOST_ARCH}
      cp $FIBJS_TARGET_DIR/fibjs-${FIBJS_VERSION}-linux-${RAY_HOST_ARCH} $FIBJS_TARGET_DIR/fibjs
      echo "$FIBJS_TARGET_DIR/fibjs Ready"
      ;;
    Darwin)
      local fibjs_binary=https://github.com/fibjs/fibjs/releases/download/${FIBJS_VERSION}/fibjs-${FIBJS_VERSION}-darwin-${RAY_HOST_ARCH}.exe
      echo "Downloading $fibjs_binary to $FIBJS_TARGET_DIR ..."

      curl -L $fibjs_binary -o $FIBJS_TARGET_DIR/fibjs-${FIBJS_VERSION}-darwin-${RAY_HOST_ARCH}
      cp $FIBJS_TARGET_DIR/fibjs-${FIBJS_VERSION}-darwin-${RAY_HOST_ARCH} $FIBJS_TARGET_DIR/fibjs
      echo "$FIBJS_TARGET_DIR/fibjs Ready"
      ;;
    *)
      echo "Unsupported OS: $RAY_HOST_OS"
      ;;
  esac
}

install_fibjs() {
  if [ -z $1 ]; then
    echo "Usage: install_fibjs <version>"
    return 1
  fi

  local FIBJS_VERSION=$1

  case $RAY_HOST_OS in
    Windows)
      # windows x64: https://github.com/fibjs/fibjs/releases/download/${FIBJS_VERSION}/installer-${FIBJS_VERSION}-windows-x64.exe
      local fibjs_installer=https://github.com/fibjs/fibjs/releases/download/${FIBJS_VERSION}/installer-${FIBJS_VERSION}-windows-${RAY_HOST_ARCH}.exe
      echo "Downloading $fibjs_installer ..."

      curl -sL $fibjs_installer -o $TMPDIR/installer-${FIBJS_VERSION}-windows-${RAY_HOST_ARCH}.exe
      echo "Installing $TMPDIR/installer-${FIBJS_VERSION}-windows-${RAY_HOST_ARCH}.exe..."
      $TMPDIR/installer-${FIBJS_VERSION}-windows-${RAY_HOST_ARCH}.exe
      ;;
    Linux)
      # linux x64: https://github.com/fibjs/fibjs/releases/download/${FIBJS_VERSION}/installer-${FIBJS_VERSION}-linux-x64.sh
      local fibjs_installer=https://github.com/fibjs/fibjs/releases/download/${FIBJS_VERSION}/installer-${FIBJS_VERSION}-linux-${RAY_HOST_ARCH}.sh
      echo "Downloading $fibjs_installer ..."

      curl -sL $fibjs_installer -o $TMPDIR/installer-${FIBJS_VERSION}-linux-${RAY_HOST_ARCH}.sh
      echo "Installing $TMPDIR/installer-${FIBJS_VERSION}-linux-${RAY_HOST_ARCH}.sh..."
      chmod +x $TMPDIR/installer-${FIBJS_VERSION}-linux-${RAY_HOST_ARCH}.sh
      $TMPDIR/installer-${FIBJS_VERSION}-linux-${RAY_HOST_ARCH}.sh
      ;;
    Darwin)
      # darwin arm64: https://github.com/fibjs/fibjs/releases/download/${FIBJS_VERSION}/installer-${FIBJS_VERSION}-darwin-arm64.sh
      local fibjs_installer=https://github.com/fibjs/fibjs/releases/download/${FIBJS_VERSION}/installer-${FIBJS_VERSION}-darwin-${RAY_HOST_ARCH}.sh
      echo "Downloading $fibjs_installer ..."

      curl -sL $fibjs_installer -o $TMPDIR/installer-${FIBJS_VERSION}-linux-${RAY_HOST_ARCH}.sh
      echo "Installing $TMPDIR/installer-${FIBJS_VERSION}-darwin-${RAY_HOST_ARCH}.sh..."
      chmod +x $TMPDIR/installer-${FIBJS_VERSION}-darwin-${RAY_HOST_ARCH}.sh
      $TMPDIR/installer-${FIBJS_VERSION}-linux-${RAY_HOST_ARCH}.sh
      ;;
    *)
      echo "Unsupported OS: $RAY_HOST_OS"
      ;;
  esac
}
